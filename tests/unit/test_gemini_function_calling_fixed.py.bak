"""
Tests for Gemini client function calling capabilities
"""

import pytest
from unittest.mock import MagicMock, patch, AsyncMock, create_autospec
import uuid
import asyncio
from typing import Dict, Any, List
import json

# Import necessary modules
from integrations import gemini_client
from config import settings

# Define role constants
USER_ROLE = "user"
ASSISTANT_ROLE = "assistant"
SYSTEM_ROLE = "system"
FUNCTION_ROLE = "function"

# Sample function definitions
SAMPLE_FUNCTIONS = [
    {
        "name": "search_database",
        "description": "Search for information in the database",
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "The search query"
                },
                "limit": {
                    "type": "integer",
                    "description": "Maximum number of results"
                }
            },
            "required": ["query"]
        }
    },
    {
        "name": "get_weather",
        "description": "Get current weather for a location",
        "parameters": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "The city and state"
                },
                "unit": {
                    "type": "string",
                    "enum": ["celsius", "fahrenheit"],
                    "description": "Temperature unit"
                }
            },
            "required": ["location"]
        }
    }
]


@pytest.mark.asyncio
async def test_gemini_function_calling():
    """Test that Gemini client properly formats function calling."""
    # Create message dictionary (not the model class)
    message = {
        "id": str(uuid.uuid4()),
        "project_id": str(uuid.uuid4()),
        "content": "What's the weather in San Francisco?",
        "role": USER_ROLE
    }
    
    # Mock the GenerativeModel class
    mock_model = MagicMock()
    mock_finish_reason = MagicMock()
    mock_finish_reason.name = "FUNCTION_CALL"
    
    mock_function_call = {
        "name": "get_weather",
        "args": {
            "location": "San Francisco",
            "unit": "celsius"
        }
    }
    
    # Create a mock response
    mock_response = MagicMock()
    mock_response.text = None  # No text for function calls
    
    # Setup the candidates
    mock_candidates = [MagicMock()]
    mock_candidates[0].finish_reason = mock_finish_reason
    mock_response.candidates = mock_candidates
    
    # Setup the function call part using a proper class with attributes
    class MockFunctionCall:
        def __init__(self):
            self.name = "get_weather"
            self.args = {"location": "San Francisco", "unit": "celsius"}
    
    mock_part = MagicMock()
    mock_part.function_call = MockFunctionCall()
    mock_content = MagicMock()
    mock_content.parts = [mock_part]
    mock_candidates[0].content = mock_content
    
    # Set up usage metadata
    mock_usage = MagicMock()
    mock_usage.prompt_token_count = 15
    mock_usage.candidates_token_count = 25
    mock_usage.total_token_count = 40
    mock_response.usage_metadata = mock_usage
    
    # The model's generate_content method should return the mock response
    mock_model.generate_content.return_value = mock_response
    
    # Track the contents passed to generate_content
    captured_content_args = []
    
    # Create a mock for _call_generate_content that captures the content
    def mock_call_generate_impl(func, *args, **kwargs):
        # If this is the generate_content function, capture args and call it
        if func == mock_model.generate_content and len(args) > 0:
            captured_content_args.append(args[0])  # Capture the first arg (content)
            func(*args, **kwargs)
        return mock_response
    
    # Create patches including API key
    with patch("integrations.gemini_client._call_generate_content", side_effect=mock_call_generate_impl):
        with patch("integrations.gemini_client.genai") as mock_genai:
            mock_genai.GenerativeModel.return_value = mock_model
            mock_genai.types = MagicMock()
            mock_genai.types.Tool = MagicMock()
            mock_genai.types.FunctionDeclaration = MagicMock()
            with patch("integrations.gemini_client.settings.GOOGLE_API_KEY", "fake-api-key"):
                
                # Call the function with function definitions
                response = await gemini_client.generate_completion(
                    messages=[message],
                    system_prompt="You are a weather assistant.",
                    functions=SAMPLE_FUNCTIONS,
                    stream=False
                )            # Verify model was created with correct parameters
            mock_genai.GenerativeModel.assert_called_once()
            model_kwargs = mock_genai.GenerativeModel.call_args.kwargs
        
        # Check that tools parameter was included
        assert "tools" in model_kwargs
        
        # Verify function call response is correctly formatted
        assert response is not None
        assert response["error"] is False
        assert response["content"] is None  # No text content for function calls
        assert "function_call" in response
        assert response["function_call"]["name"] == "get_weather"
        assert "args" in response["function_call"]
        assert response["function_call"]["args"]["location"] == "San Francisco"
        assert response["function_call"]["args"]["unit"] == "celsius"


@pytest.mark.asyncio
async def test_function_result_handling():
    """Test that Gemini client properly handles function result messages."""
    # Create message conversation with function call and result
    messages = [
        {
            "id": str(uuid.uuid4()),
            "project_id": str(uuid.uuid4()),
            "content": "What's the weather in San Francisco?",
            "role": USER_ROLE
        },
        {  # This is a function call message
            "id": str(uuid.uuid4()),
            "project_id": str(uuid.uuid4()),
            "content": None,
            "role": ASSISTANT_ROLE,
            "function_call": {
                "name": "get_weather",
                "args": {
                    "location": "San Francisco",
                    "unit": "celsius"
                }
            }
        },
        {  # This is a function result message
            "id": str(uuid.uuid4()),
            "project_id": str(uuid.uuid4()),
            "content": '{"temperature": 18, "condition": "Partly Cloudy", "humidity": 65}',
            "role": FUNCTION_ROLE,
            "name": "get_weather"
        }
    ]
    
    # Mock normal text response
    mock_response = MagicMock()
    mock_response.text = "It's 18°C and partly cloudy in San Francisco with 65% humidity."
    
    # Add parts attribute with text content to mock_response
    mock_response.parts = [MagicMock()]
    mock_response.parts[0].text = "It's 18°C and partly cloudy in San Francisco with 65% humidity."
    
    # Setup finish reason
    mock_finish_reason = MagicMock()
    mock_finish_reason.name = "STOP"
    mock_candidates = [MagicMock()]
    mock_candidates[0].finish_reason = mock_finish_reason
    mock_response.candidates = mock_candidates
    
    # Set up usage metadata
    mock_usage = MagicMock()
    mock_usage.prompt_token_count = 25
    mock_usage.candidates_token_count = 15
    mock_usage.total_token_count = 40
    mock_response.usage_metadata = mock_usage
    
    # Create and configure the mock model
    mock_model = MagicMock()
    mock_model.generate_content.return_value = mock_response
    
    # Track the contents passed to generate_content
    captured_content_args = []
    
    # Create a mock for _call_generate_content that captures the content
    def mock_call_generate_impl(func, *args, **kwargs):
        # If this is the generate_content function, capture args and call it
        if func == mock_model.generate_content and len(args) > 0:
            captured_content_args.append(args[0])  # Capture the first arg (content)
            func(*args, **kwargs)
        return mock_response
            
        # Create patches including API key
        with patch("integrations.gemini_client._call_generate_content", side_effect=mock_call_generate_impl):
            with patch("integrations.gemini_client.genai") as mock_genai:
                mock_genai.GenerativeModel.return_value = mock_model
                mock_genai.types = MagicMock()
                mock_genai.types.Tool = MagicMock()
                mock_genai.types.FunctionDeclaration = MagicMock()
                with patch("integrations.gemini_client.settings.GOOGLE_API_KEY", "fake-api-key"):
                
                    # Call the function with the conversation including function result
                    response = await gemini_client.generate_completion(
                        messages=messages,
                        system_prompt="You are a weather assistant.",
                        functions=SAMPLE_FUNCTIONS,
                        stream=False
                    )
        
        # Verify regular text response after function call
        assert response is not None
        assert response["error"] is False
        assert response["content"] == "It's 18°C and partly cloudy in San Francisco with 65% humidity."
        assert response["finish_reason"] == "STOP"
        
        # Verify generate_content was called
        mock_model.generate_content.assert_called_once()
        
        # Verify function result was included in the call
        call_args = mock_model.generate_content.call_args[0][0]
        call_args_str = str(call_args)
        assert "get_weather" in call_args_str
        assert "temperature" in call_args_str
        assert "18" in call_args_str


@pytest.mark.asyncio
async def test_streaming_function_calling():
    """Test function calling with streaming enabled."""
    # Create message
    message = {
        "id": str(uuid.uuid4()),
        "project_id": str(uuid.uuid4()),
        "content": "Search for information about Mars",
        "role": USER_ROLE
    }
    
    # Create mock chunk for streaming
    mock_chunk = MagicMock()
    
    # Set up function call in the chunk using a proper class with attributes
    class MockStreamFunctionCall:
        def __init__(self):
            self.name = "search_database"
            self.args = {"query": "Mars planet", "limit": 5}
    
    mock_part = MagicMock()
    mock_part.function_call = MockStreamFunctionCall()
    mock_content = MagicMock()
    mock_content.parts = [mock_part]
    mock_candidates = [MagicMock()]
    mock_candidates[0].content = mock_content
    
    # Setup finish reason
    mock_finish_reason = MagicMock()
    mock_finish_reason.name = "FUNCTION_CALL"
    mock_candidates[0].finish_reason = mock_finish_reason
    mock_chunk.candidates = mock_candidates
    
    # Create a mock stream that yields the chunk
    mock_stream = MagicMock()
    mock_stream.__iter__.return_value = [mock_chunk]
    
    # Create mock model
    mock_model = MagicMock()
    mock_model.generate_content.return_value = mock_stream
    
    # Create patches
    with patch("integrations.gemini_client.genai.GenerativeModel", return_value=mock_model), \
         patch("integrations.gemini_client.settings.GOOGLE_API_KEY", "fake-api-key"):
        
        # Call the function with streaming - make sure to await it
        stream_gen = await gemini_client.generate_completion(
            messages=[message],
            system_prompt="You are a search assistant.",
            functions=SAMPLE_FUNCTIONS,
            stream=True
        )
        
        # Process the stream
        chunks = []
        async for chunk in stream_gen:
            chunks.append(chunk)
        
        # Check that we got at least one chunk
        assert len(chunks) >= 1
        final_chunk = chunks[-1]
        
        # Verify function call data is in the final chunk
        assert final_chunk["is_final"] is True
        assert "function_call" in final_chunk
        assert final_chunk["function_call"]["name"] == "search_database"
        assert final_chunk["function_call"]["args"]["query"] == "Mars planet"
        assert final_chunk["function_call"]["args"]["limit"] == 5
