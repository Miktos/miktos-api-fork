"""Add repository_url and context_status to Project model

Revision ID: 80e689ef185c
Revises: b58d8acd1b0a # Make sure this matches the PREVIOUS migration ID
Create Date: 2023-10-27 10:00:00.000000 # This date will be different for you

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# --- Import your Enum ---
# Make sure the path is correct relative to the migrations folder
# Adjust if your models/database_models.py is elsewhere
try:
     # Assumes models are importable from the top-level directory
     from models.database_models import ContextStatus
except ImportError:
     # Fallback if direct import fails during migration run
     import enum
     class ContextStatus(enum.Enum):
        PENDING = "PENDING"
        INDEXING = "INDEXING"
        READY = "READY"
        FAILED = "FAILED"
        NONE = "NONE"


# revision identifiers, used by Alembic.
revision: str = '80e689ef185c'
down_revision: Union[str, None] = 'b58d8acd1b0a' # Make sure this matches the PREVIOUS migration ID
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """
    Applies the migration changes.

    NOTE: The 'repository_url' column add command is commented out
          because it likely exists due to a previous partial run.
          This migration now focuses on adding 'context_status' correctly.
    """
    # ### commands auto generated by Alembic - adjusted! ###

    # Add repository_url - COMMENTED OUT / REMOVED
    # This command is skipped because the column likely exists already
    # op.add_column('projects', sa.Column('repository_url', sa.String(), nullable=True))

    # Use batch mode for adding the non-nullable context_status column
    # This handles SQLite limitations when adding NOT NULL columns to existing tables
    print("Applying batch operation to add 'context_status' column...")
    with op.batch_alter_table('projects', schema=None) as batch_op:
        batch_op.add_column(sa.Column('context_status',
                                     sa.Enum(ContextStatus, name='contextstatus'), # Use the imported Enum
                                     nullable=False,
                                     # Set default value for existing rows at the DB level for SQLite
                                     server_default=str(ContextStatus.NONE.value)
                                     ))
    print("'context_status' column added with batch operation.")
    # ### end Alembic commands ###


def downgrade() -> None:
    """
    Reverts the migration changes.

    NOTE: The 'repository_url' column drop command is commented out
          because the corresponding add command was removed from upgrade().
    """
    # ### commands auto generated by Alembic - adjusted! ###

    # Use batch mode for dropping the context_status column
    print("Applying batch operation to drop 'context_status' column...")
    with op.batch_alter_table('projects', schema=None) as batch_op:
        batch_op.drop_column('context_status')
    print("'context_status' column dropped with batch operation.")

    # Drop repository_url - COMMENTED OUT / REMOVED
    # This is skipped as the corresponding add command was removed from upgrade()
    # op.drop_column('projects', 'repository_url')

    # --- Optional: Drop the Enum type if necessary (depends on backend) ---
    # print("Dropping Enum type 'contextstatus'...")
    # contextstatus_enum = sa.Enum(ContextStatus, name='contextstatus')
    # contextstatus_enum.drop(op.get_bind(), checkfirst=False)
    # print("Enum type 'contextstatus' dropped.")

    # ### end Alembic commands ###